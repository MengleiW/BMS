import numpy as np
import scipy
import matplotlib.pyplot as plt
#import math
#import pymc3 as pm
#import theano.tensor as tt


def damped_oscillator(t, y, gamma, k):
    """
    Models a damped oscillator system.

    Inputs:
          t: Float, the current time point.
          y: List, current state of the system.
          gamma: Float, damping coefficient.
          k: Float, stiffness coefficient.

    Outputs:
         [y[1], f_t - gamma*y[1] - k*y[0]]: List, Derivative of the system state.
    """
    f_t = 0  
    #f_t = np.sin(t) 
    return [y[1], f_t - gamma*y[1] - k*y[0]]

def simulate_observed_data(gamma, k, initial_conditions, ts, N, noise_level_s, noise_level_j):
    """
    Simulates the damped oscillator system over a given time span using solve_ivp.

    Inputs:
      gamma: Float, damping coefficient.
      k: Float, stiffness coefficient.
      initial_conditions: List, initial state of the system.
      ts: List, time span for simulation .
      N: Integer, number of points to evaluate in the time span.
      smooth_noise_level: number, level of random noise in the first half (smooth phase).
      jumpy_noise_level: number, level of random noise in the second half (jumpy phase).
    Outputs:
      (y, yp): list, where y is the position array and yp is the velocity array over the time span.
    """
    t = np.linspace(ts[0], ts[1], N)
    sol = scipy.integrate.solve_ivp(damped_oscillator, ts, initial_conditions, args=(gamma, k), t_eval=t)
    half = N // 2
    y = sol.y[0]
    yp = sol.y[1]  
    # Apply smooth noise to the first half and jumpy noise to the second half
    noise1 = np.concatenate([np.random.normal(0, noise_level_s,  half),
                             np.random.normal(0, noise_level_j, N -  half)])
    noise2 = np.concatenate([np.random.normal(0, noise_level_s,  half),
                             np.random.normal(0, noise_level_j, N -  half)])
    y += noise1
    yp += noise2
    
    return y, yp

def euler_forward(gammas, k, y, t, h):
    """
    Numerically approximates the solution of the damped oscillator using the Euler forward method for a single time point.

    Inputs:
      gammas: Array, range of damping coefficients.
      k: Float, stiffness coefficient.
      y: 2D Array, initial states of the system for each gamma (position and velocity).
      t: Float, single time point.
      h: Float, time step.

    Outputs:
      y: 2D Array, where each row corresponds to the system states (position and velocity) for a specific gamma.
    """

    for i, gamma in enumerate(gammas):
        y[i,:] += h * np.array(damped_oscillator(t, y[i, :], gamma, k)) 
        

    return y

def trapezoidal_method(gammas, k, y, t, h):
    """
    Numerically approximates the solution of the damped oscillator using the trapezoidal method for a single time point.

    Inputs:
      gammas: Array, range of damping coefficients.
      k: Float, stiffness coefficient.
      y: 2D Array, initial states of the system for each gamma (position and velocity).
      t: Float, single time point.
      h: Float, time step.

    Outputs:
      y: 2D Array, where each row corresponds to the system states (position and velocity) for a specific gamma.
    """
    for i, gamma in enumerate(gammas):
        f_n = np.array(damped_oscillator(t, y[i, :], gamma, k))
        y_pred = y[i, :] + h * f_n
        f_n_plus_1 = np.array(damped_oscillator(t + h, y_pred, gamma, k))
        y[i, :] = y[i, :] + h/2 * (f_n + f_n_plus_1)  
         

    return y


def calculate_combined_log_likelihood(simulated, observed_y, observed_yp, sigma_y, sigma_yp):
    """
    Computes the combined log-likelihood of the observed position and velocity data for a given simulated dataset.

    Inputs:
        simulated: Array, the simulated data from the model.
        observed_y: Array, observed data for position (y).
        observed_yp: Array, observed data for velocity (y').
        sigma_y: Float, standard deviation of error in position measurements.
        sigma_yp: Float, standard deviation of error in velocity measurements.

    Outputs:
        log_likelihood: Float, the combined log-likelihood value of the observed data given the simulated model outputs.

    """
    ll_y = np.zeros(len(simulated))
    ll_yp = np.zeros(len(simulated))

    for i in range(len(simulated)):
        residuals_y = observed_y - simulated[i, :, 0]
        residuals_yp = observed_yp - simulated[i, :, 1]

        lly = np.sum(scipy.stats.norm.logpdf(residuals_y, scale=sigma_y))
        llyp = np.sum(scipy.stats.norm.logpdf(residuals_yp, scale=sigma_yp))

        ll_y[i] = lly
        ll_yp[i] = llyp

    return ll_y, ll_yp

def HM_FindZ(log_likelihood, N):
    """
    Description: To find the Z = nomalizing constant using Importat sampling method given liklihood and prior

    Inputs:
       
       
        log_Likelihood: Single, (1,1) , l(y|theta_i, M) where theta_i stands for variable of interest , y stands for the data and
        M is our current model.
       
       
        Outputs:
       
            Zhat: (1,1) approximatioin of nomalized posterior.

           
           
        Modified:
       
            10/05/2023 (Menglei Wang)
           
        """
   
    #unlog the log_likehood
    likelihood = np.exp(log_likelihood)
    
    #calculate Zhat
    Zhat = 1/((np.sum(1/likelihood))/N)
    
    return Zhat

def RIS_marginal_likelihood(method, gammas, observed_y, observed_yp, sigma_y, sigma_yp, initial_conditions, T, k):
    """
    Computes the marginal likelihood of a model using Reverse Importance Sampling.

    Inputs:
        method: Function, the numerical method used for simulating the model (e.g., Euler forward or trapezoidal).
        gammas: Array, range of parameter values to be tested.
        observed_y: Array, observed data for position (y).
        observed_yp: Array, observed data for velocity (y').
        sigma_y: Float, standard deviation of error in position measurements.
        sigma_yp: Float, standard deviation of error in velocity measurements.
        initial_conditions: Array, initial conditions of the system.
        T: Array, time points for evaluation.
        k: Float, stiffness coefficient.

    Outputs:
        results: List of lists, each inner list contains the log marginal likelihoods for each gamma at a specific checkpoint.
        data: Array, simulated data for each gamma over time.
    """
    results = []
    data = np.zeros((len(gammas), len(T), 2))
    data[:, 0, 0] = initial_conditions[0]  
    data[:, 0, 1] = initial_conditions[1] 

    for i, t in enumerate(T[1:], start=1): 
        h = t - T[i - 1]
        data[:, i, :] = method(gammas, k, data[:, i - 1, :], t, h)
        log_likelihood_y, log_likelihood_yp = calculate_combined_log_likelihood(data[:, i, :], observed_y, observed_yp, sigma_y, sigma_yp)
        Z_y = HM_FindZ(log_likelihood_y, len(gammas))
        Z_yp = HM_FindZ(log_likelihood_yp, len(gammas))
        results.append([Z_y, Z_yp])

    return results, data
# Parameters 
m = 1
k = 0.5
initial_conditions = [1, 0]
gammas = np.linspace(0, 1, 10)
T = np.linspace(0, 100, 1000)

N = 1000 
sigma_y = 0.3 
sigma_yp = 0.1
noise_level_s = 0.0001
noise_level_j = 0.01

#y = euler_forward(gammas, k, initial_conditions, T)
#print('y=',y)
#for gamma in gammas:
gamma = 0.1
observed_y, observed_yp = simulate_observed_data(gamma, k, initial_conditions, [0,100], N, noise_level_s, noise_level_j)

# Compute marginal likelihoods for each method
Z_e,data_e = Z_t,data_t = RIS_marginal_likelihood(euler_forward, gammas, observed_y, observed_yp, sigma_y, sigma_yp, initial_conditions, T, k)
Z_t,data_t = RIS_marginal_likelihood(trapezoidal_method, gammas, observed_y, observed_yp, sigma_y, sigma_yp, initial_conditions, T, k)


