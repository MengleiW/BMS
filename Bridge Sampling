"""
This file provides a single function that uses the RIS to find initial Rhat and iterateion follows Optimal Bridge Samling
"""

import numpy as np
import matplotlib.pyplot as plt
import math
import pickle
import scipy.special
import BMS
import random






def OptimalBridge (data,sigma, NS):
    
    """
    Description: To find the uniform prior.

    Inputs:
       
        Ns:   (1,1) number of stages
        
        data: (2,2) The data generated by a MCMC = {'model01': {'tht': tht_for_model01, 'y': y_vals_for_model01 }, 
              'model02': {'tht': tht_for_model02, 'y': y_vals_for_model02 }} 
       
        sigma: double >0, the standard diviation of Multivariate normal
               distribution representing the experimental error.
       
    Outputs:
   
         Rhat: (0,0) The ratio between Z1 and Z2

       
       
     Modified:
   
         10/07/2023 (Menglei Wang)
           
    """
    
    #extrac data
    tht1 = data['model01']['tht']
    tht2 = data['model02']['tht']
    y1 = data['model01']['y']
    y2 = data['model02']['y']
    theta_bounds = np.array([[0.7,1.3],[0.7,1.3]])
    N1,D1 = tht1.shape
    N2,D2 = tht1.shape
    
    #Finding Q11
    prior1 = BMS.uniform_prior(tht1, theta_bounds)
    likelihood1 = BMS.gauss_log_likelihood(y1,sigma)
    q11 = np.array(prior1*likelihood1)
    
    #Finding Q22
    prior2 = BMS.uniform_prior(tht2, theta_bounds)
    likelihood2 = BMS.gauss_log_likelihood(y2,sigma)
    q22 = np.array(prior2*likelihood2)
    
    #Finding Q12
    q12 = np.array(prior2*likelihood1)
    
    #Finding Q21
    q21 = np.array(prior1*likelihood2)
    
    #Caculating the initial rhat
    rhat = BMS.RisModel_compaire(data, sigma)
    
    for i in range (NS):
         
         Q1 = (np.sum(q12/(N1*q12+N2*rhat*q22)))/N2
         Q2 = (np.sum(q21/(N1*q11+N2*rhat*q21)))/N1
         print('q1=',rhat)
         rhat = Q1/Q2

    h = rhat +1
    Z2 = rhat/h
    Z1 = 1/h
        
    #graphing
    plt.pie([Z2,Z1], labels= [Q2,Q1], colors = ["red","blue"])
    plt.annotate('Red is Z2', xy=(-1.1,0.8))
    plt.annotate('Blue is Z1', xy=(-1.1, 0.9)) 
    plt.title('Rhat')
    plt.tight_layout()
    plt.show()


    return rhat


if __name__ == '__main__':
    atomic_data_pickle_path = 'C:\\Users\\whisk\\atomic_data.pickle'
    #atomic_data_path =  '../data/atomic_data.pickle'
    with open('atomic_data.pickle', 'rb')  as f:
       data = pickle.load(f)
    NS = 10   
    sigma = 0.1
    #HMModel_compaire (data,sigma)
    #RisModel_compaire (data,sigma)
   
    
    y = data['model01']['y']
    
    tht2 = data['model02']['tht']
    
    OptimalBridge (data,sigma, NS)
    
    
    
    
    
    
    
    
